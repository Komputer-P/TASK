{"version":3,"sources":["components/timer/TimerDisplay.js","components/timer/Timer.js","components/timer/TimerTemplate.js","components/preference/DarkMode.js","components/preference/TimerChange.js","components/preference/PreferenceTemplate.js","components/fixed/Navigation.js","components/fixed/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["TimerDisplay","minutes","seconds","className","Timer","timeSet","pomoUpdate","countdown","useRef","isBreakTime","useState","remainderMinutes","setRemainderMinutes","remainderSeconds","setRemainderSeconds","timerSet","setTimerSet","timerActive","setTimerActive","timer","clearInterval","end_time","Date","now","setInterval","seconds_left","Math","round","break_time_display","document","querySelector","floor","innerHTML","useEffect","type","value","onClick","disabled","TimerTemplate","idToken","pomo","setPomo","fetched","setFetched","fetch","method","headers","body","JSON","stringify","then","response","json","info","console","log","pomodoroForm","tokenId","updatedPomodoro","DarkMode","darkTheme","onToggle","checked","onChange","TimerChange","formInput","setFormInput","handleUpdate","RegExp","test","time_parsed","split","parseInt","alert","e","target","onKeyPress","key","placeholder","PreferenceTemplate","Navigation","userInfo","id","to","src","pictureUrl","alt","name","Footer","App","setDarkTheme","handleThemeToggle","navigation","footer","classList","add","remove","isPatched","setIsPatched","setUserInfo","cookie","find","row","startsWith","newUserInfo","basename","path","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.23c60e78.chunk.js","sourcesContent":["import './TimerDisplay.css';\r\n\r\nconst TimerDisplay = ({ minutes, seconds }) => {\r\n    return (\r\n        <h1 className=\"timer_display\">\r\n            {minutes < 10 ? '0' : ''}{minutes}:{seconds < 10 ? '0' : ''}{seconds} \r\n        </h1>\r\n    );\r\n}\r\n\r\nexport default TimerDisplay;","import { useEffect, useRef, useState } from 'react';\r\nimport './Timer.css';\r\nimport TimerDisplay from './TimerDisplay';\r\n\r\nconst Timer = ({ timeSet, pomoUpdate }) => {\r\n    let countdown = useRef(null);\r\n    let isBreakTime = false;\r\n\r\n    const [ remainderMinutes, setRemainderMinutes ] = useState(0);\r\n    const [ remainderSeconds, setRemainderSeconds ] = useState(0);\r\n    const [ timerSet, setTimerSet ] = useState(timeSet);\r\n    const [ timerActive, setTimerActive ] = useState(false);\r\n\r\n    const breakTimerSet = 5*60;\r\n\r\n    // timeSet props 가져오기\r\n    useEffect(() => {\r\n        setTimerSet(timeSet);    \r\n    }, [ timeSet ]);\r\n\r\n    // 설정되어 있는 시간만큼 초기 화면 표시\r\n    useEffect(() => {\r\n        setRemainderMinutes(Math.floor(timerSet / 60));\r\n        setRemainderSeconds(timerSet % 60);\r\n    }, [ timerSet ]);\r\n\r\n    // Router 이동시 states cleanUp 해주기\r\n    useEffect(() => {\r\n        return () => clearInterval(countdown);\r\n    }, []); \r\n\r\n    function start_timer() {\r\n        timer(timerSet);\r\n        setTimerActive(true);\r\n    }\r\n\r\n    // 타이머\r\n    function timer(seconds) { \r\n        clearInterval(countdown);\r\n    \r\n        const start_time = Date.now();\r\n        const end_time = start_time + seconds * 1000;\r\n            \r\n        countdown = setInterval(() => {\r\n            const seconds_left = Math.round((end_time-Date.now()) / 1000); // accurate version\r\n\r\n            if(seconds_left < 0) {\r\n                clearInterval(countdown);\r\n                \r\n                const break_time_display = document.querySelector('.break_time_display');\r\n\r\n                if(!isBreakTime) {\r\n                    isBreakTime = true;\r\n                    setTimerSet(breakTimerSet);\r\n                    // 설정된 휴식시간 타이머 디스플레이: 5분\r\n                    setRemainderMinutes(5);\r\n                    setRemainderSeconds(0);\r\n                    pomoUpdate();\r\n                    break_time_display.innerHTML = \"휴식 시간!\";\r\n\r\n                    timer(breakTimerSet);\r\n                } else {\r\n                    isBreakTime = false;\r\n                    setTimerSet(timeSet);\r\n                    // 설정된 타이머 디스플레이하기\r\n                    setRemainderMinutes(Math.floor(timerSet / 60));\r\n                    setRemainderSeconds(timerSet);\r\n                    break_time_display.innerHTML = \"\";\r\n                }\r\n\r\n                return;\r\n            }\r\n            \r\n            setRemainderMinutes(Math.floor(seconds_left / 60));\r\n            setRemainderSeconds(seconds_left % 60);\r\n        }, 1000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            <TimerDisplay minutes={remainderMinutes} seconds={remainderSeconds}></TimerDisplay>\r\n            <h1 className=\"break_time_display\">{}</h1>\r\n            <input className=\"start_timer_button\" type=\"button\" value=\"타이머 시작!\" onClick={start_timer} disabled={timerActive ? ('disabled') : ('')}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import './TimerTemplate.css';\r\nimport Timer from './Timer.js';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst TimerTemplate = ({ idToken }) => {\r\n    const [ pomo, setPomo ] = useState(0);\r\n    const [ timerSet, setTimerSet ] = useState(25*60);\r\n    const [ fetched, setFetched ] = useState(false);\r\n\r\n    function handlePomoUpdate() {\r\n        const pomodoroForm = {\r\n            tokenId : idToken,\r\n            timerSet : timerSet,\r\n            pomo : pomo+1\r\n        };    \r\n\r\n        // 서버\r\n        fetch(`http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/pomodoro/update`, {\r\n            method : 'PUT',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(pomodoroForm)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((updatedPomodoro) => {\r\n            setPomo(updatedPomodoro.pomo);\r\n            console.log(\"Updated Pomo: \", updatedPomodoro.pomo);\r\n        });\r\n    }\r\n\r\n    // FETCH - POST\r\n    useEffect(() => {\r\n        if(!fetched) {\r\n            fetch('http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/pomodoro', {\r\n                method : 'POST',\r\n                headers : {\r\n                    'content-type' : 'application/json'\r\n                },\r\n                body : JSON.stringify(idToken)\r\n            })\r\n            .then((response) => response.json())\r\n            .then((info) => {\r\n                console.log(\"서버로부터 Pomodoro 정보 가져옴: \",  info.timerSet, info.pomo);\r\n                setTimerSet(info.timerSet);\r\n                setPomo(info.pomo);\r\n                setFetched(true);\r\n            });\r\n        }\r\n    }, [fetched]);\r\n\r\n    \r\n    return (\r\n        <div className=\"timer_template component\">\r\n            <h1>뽀모도로!</h1>\r\n            <Timer timeSet={timerSet} pomoUpdate={handlePomoUpdate}></Timer> \r\n            <h2 className=\"pomodoro_count\">오늘은 {pomo} 뽀모를 했어요!</h2>\r\n            <p>1 포모 = 25분 집중, 5분 휴식</p>\r\n            <p>4 포모 후 30분 휴식</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimerTemplate;","import './DarkMode.css'; \r\n\r\nconst DarkMode = ({ darkTheme, onToggle }) => {\r\n    return (\r\n        <div className=\"preference_component\">\r\n            <h3>기본 설정</h3>\r\n            <div className=\"theme_toggle\">\r\n                <span className=\"text\">다크 모드</span>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" checked={darkTheme} onChange={onToggle}></input>\r\n                    <span className=\"slider\"></span>\r\n                </label>\r\n                <p>밤에는 다크 모드를 켜는 것을 추천드려요.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DarkMode;","import { useState, useEffect } from \"react\";\r\nimport \"./TimerChange.css\";\r\n\r\nconst TimerChange = ({ idToken }) => {\r\n    const [ formInput, setFormInput ] = useState(''); // 입력 필드값\r\n    const [ timerSet, setTimerSet ] = useState(0);\r\n    const [ pomo, setPomo ] = useState(0);\r\n    const [ fetched, setFetched ] = useState(false);\r\n\r\n    // FETCH - POST\r\n    useEffect(() => {\r\n        if(!fetched) {\r\n            fetch('http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/pomodoro', {\r\n                method : 'POST',\r\n                headers : {\r\n                    'content-type' : 'application/json'\r\n                },\r\n                body : JSON.stringify(idToken)\r\n            })\r\n            .then((response) => response.json())\r\n            .then((info) => {\r\n                console.log(\"서버로부터 Pomodoro 정보 가져옴: \",  info.timerSet, info.pomo);\r\n                setTimerSet(info.timerSet);\r\n                setPomo(info.pomo);\r\n                setFetched(true);\r\n            });\r\n        }\r\n    }, [fetched]);\r\n    \r\n    function handleUpdate() {\r\n        setFormInput('');\r\n        // 입력값 유효성 검사 (분:초)\r\n        if(!RegExp(\"[0-9][0-9]:[0-9][0-9]\").test(formInput)) { //if not in correct format\r\n            alert(\"형식에 맞게 값을 입력해주세요!\");\r\n            return;\r\n        }\r\n\r\n        const time_parsed = formInput.split(':');\r\n        let minutes = parseInt(time_parsed[0]);\r\n        let seconds = parseInt(time_parsed[1]);\r\n        seconds += minutes * 60;\r\n        \r\n        const pomodoroForm = {\r\n            tokenId : idToken,\r\n            timerSet : seconds,\r\n            pomo : pomo\r\n        };    \r\n\r\n        // 서버\r\n        fetch(`http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/pomodoro/update`, {\r\n            method : 'PUT',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(pomodoroForm)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((updatedPomodoro) => {\r\n            setTimerSet(updatedPomodoro.timerSet);\r\n            console.log(\"Updated TimerSet: \", updatedPomodoro.timerSet );\r\n        });\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setFormInput(e.target.value);\r\n    }\r\n\r\n    function handleKeyPress(e) {\r\n        if(e.key === 'Enter') {\r\n            handleUpdate();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"preference_component\">\r\n            <h3>타이머 설정</h3>\r\n            <div className=\"timer_set_form\">\r\n                <input className=\"timer_set_text\" type=\"text\" value={formInput} onChange={handleChange} onKeyPress={handleKeyPress} placeholder=\"분 : 초 \"></input>\r\n                <button className=\"timer_set_submit\" onClick={handleUpdate}>변경</button>\r\n            </div>\r\n            <p>자신만의 뽀모도로 타이머를 세팅해보세요.</p>\r\n            <p>현재 타이머 세팅: <b className=\"timer_set_display\">{Math.floor(timerSet / 60) < 10 ? ('0' + Math.floor(timerSet / 60)) : (Math.floor(timerSet / 60))}:{(timerSet % 60) < 10 ? ('0' + timerSet % 60) : (timerSet % 60)}</b></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimerChange;","import './PreferenceTemplate.css'; \r\nimport DarkMode from \"./DarkMode\";\r\nimport TimerChange from \"./TimerChange\";\r\n\r\nconst PreferenceTemplate = ({ idToken, darkTheme, onToggle }) => {\r\n\r\n    return (\r\n        <div className=\"preference_template\">\r\n            <h1 className=\"preference_title\">설정</h1>\r\n            <ul>\r\n                <li>\r\n                    <TimerChange idToken={idToken}></TimerChange>\r\n                </li>\r\n                <li>\r\n                    <DarkMode darkTheme={darkTheme} onToggle={onToggle}></DarkMode>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PreferenceTemplate;","import { Link } from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({ userInfo }) => {\r\n    return (\r\n        <nav className=\"navigation\">\r\n            <ul className=\"navigation-list\">\r\n                <li id=\"logo\">&pi;</li>\r\n                <li><Link to=\"/\">뽀모</Link></li>\r\n                <li><Link to=\"/preference\">설정</Link></li>\r\n                <li>\r\n                    <div className=\"navigation-user-info\">\r\n                        <img className=\"navigation-user_picture\" src={userInfo.pictureUrl} alt={userInfo.name}></img>\r\n                        <span className=\"navigation-user-name\">{userInfo.name}</span>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>ⓒ 2021 Kevin.P, All rights reserved.</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import './App.css';\r\nimport TimerTemplate from './components/timer/TimerTemplate';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport PreferenceTemplate from './components/preference/PreferenceTemplate';\r\nimport Navigation from './components/fixed/Navigation';\r\nimport Footer from './components/fixed/Footer';\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction App() {\r\n  const [ darkTheme, setDarkTheme ] = useState(false);\r\n\r\n  useEffect(() => { // 랜더링 이후 다크 모드 설정 (추후 리팩토링)\r\n    const body = document.querySelector('body');\r\n    const navigation = document.querySelector('.navigation');\r\n    const footer = document.querySelector('.footer');\r\n\r\n    if(darkTheme) {  \r\n      body.classList.add('dark');\r\n      navigation.classList.add('dark');\r\n      footer.classList.add('dark');\r\n    }\r\n    else {\r\n      body.classList.remove('dark');\r\n      navigation.classList.remove('dark');\r\n      footer.classList.remove('dark');\r\n    }\r\n  }, [ darkTheme ]);\r\n\r\n  function handleThemeToggle() {\r\n    setDarkTheme(!darkTheme);\r\n  }\r\n\r\n  const [isPatched, setIsPatched] = useState(false);\r\n  const [userInfo, setUserInfo] = useState(\"\");\r\n  const idToken = document.cookie.split('; ').find(row => row.startsWith('idToken')).split('=')[1];\r\n  \r\n  // Read\r\n  useEffect(() => {\r\n      if (!isPatched) {\r\n          // GET 방식으로 서버 전송\r\n          fetch('http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/user', {\r\n              method: 'POST',\r\n              headers: {\r\n                  'content-type': 'application/json'\r\n              },\r\n              body: JSON.stringify(idToken)\r\n          })\r\n              .then((response) => response.json())\r\n              .then((newUserInfo) => {\r\n                  console.log(\"유저 정보 가져옴: \", { newUserInfo });\r\n                  setUserInfo(newUserInfo);\r\n              });\r\n\r\n          setIsPatched(true);\r\n      }\r\n  }, [isPatched]);\r\n\r\n  return (\r\n    <Router basename=\"/pomodoro\">\r\n      <div className=\"main\">\r\n        <Navigation userInfo={userInfo}></Navigation>\r\n        <Switch>\r\n          <Route path={'/'} exact render={() => <TimerTemplate idToken={idToken}></TimerTemplate>}/>\r\n          <Route path={'/preference'} render={() => <PreferenceTemplate idToken={idToken} darkTheme={darkTheme} onToggle={handleThemeToggle}></PreferenceTemplate>}/>\r\n        </Switch>\r\n        <Footer></Footer>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}