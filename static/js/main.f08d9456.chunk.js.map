{"version":3,"sources":["components/fixed/Footer.js","components/dashboard/Dashboard.js","components/fixed/Navigation.js","components/dashboard/DashboardTemplateWrapper.js","components/preference/Preference.js","components/preference/PreferenceTemplateWrapper.js","components/login/Login.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","className","Dashboard","passUserInfo","useState","todoItems","setTodoItems","pomodoroItem","setPomodoroItem","isPatched","setIsPatched","userInfo","setUserInfo","todoItemsCount","setTodoItemsCount","todoItemsDoneCount","setTodoItemsDoneCount","pomoCount","setPomoCount","pomoTotalCount","setPomoTotalCount","pomoTimer","setPomoTimer","idTokenLocation","document","cookie","split","find","row","startsWith","idToken","undefined","window","location","replace","useEffect","fetch","method","headers","body","JSON","stringify","then","response","json","newUserInfo","console","log","data","info","timerSet","pomo","maxPomo","totalPomo","length","filter","todoItem","isDone","minutes","Math","floor","seconds","calPomdoroCount","src","pictureUrl","alt","name","style","display","href","target","rel","round","isNaN","Navigation","id","to","onClick","querySelector","classList","toggle","gapi","auth2","getAuthInstance","signOut","DashboardTemplateWrapper","darkTheme","navigation","add","remove","Preference","onToggle","type","checked","onChange","color","PreferenceTemplateWrapper","handleThemeToggle","fontSize","marginBottom","Login","history","googleLoginBtn","useRef","d","s","js","fjs","getElementsByTagName","getElementById","createElement","parentNode","insertBefore","googleSDKLoaded","load","init","client_id","attachClickHandler","current","googleUser","id_token","getAuthResponse","tokenExpireTime","localStorage","setItem","userName","push","onSuccess","error","alert","onFailure","ref","App","setDarkTheme","footer","handleUserInfo","path","exact","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.f08d9456.chunk.js","sourcesContent":["import './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>ⓒ 2021 Kevin.P, All rights reserved.</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import './Dashboard.css';\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction Dashboard({ passUserInfo }) {\r\n    const [todoItems, setTodoItems] = useState([]);\r\n    const [pomodoroItem, setPomodoroItem] = useState([]);\r\n    const [isPatched, setIsPatched] = useState(false);\r\n\r\n    const [userInfo, setUserInfo] = useState(\"\");\r\n\r\n    const [todoItemsCount, setTodoItemsCount] = useState(0);\r\n    const [todoItemsDoneCount, setTodoItemsDoneCount] = useState(0);\r\n\r\n    const [pomoCount, setPomoCount] = useState(0);\r\n    const [pomoTotalCount, setPomoTotalCount] = useState(0);\r\n    const [pomoTimer, setPomoTimer] = useState({});\r\n\r\n    const idTokenLocation = document.cookie.split('; ').find(row => row.startsWith('idToken'));\r\n    const idToken = idTokenLocation === undefined ? window.location.replace('http://komputer-task.ml') : idTokenLocation.split('=')[1];\r\n\r\n    // Read\r\n    useEffect(() => {\r\n        if (!isPatched) {\r\n            // GET 방식으로 서버 전송\r\n            fetch('http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/user', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(idToken)\r\n            })\r\n                .then((response) => response.json())\r\n                .then((newUserInfo) => {\r\n                    console.log(\"유저 정보 가져옴: \", { newUserInfo });\r\n                    setUserInfo(newUserInfo);\r\n                    passUserInfo(newUserInfo);\r\n                });\r\n\r\n            fetch('http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/todos', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(idToken)\r\n            })\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    console.log(\"Todo Items: \", data);\r\n                    setTodoItems(data);\r\n                });\r\n\r\n            fetch('http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/pomodoro', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(idToken)\r\n            })\r\n                .then((response) => response.json())\r\n                .then((info) => {\r\n                    console.log(\"서버로부터 Pomodoro 정보 가져옴: \", info.timerSet, info.pomo, info.maxPomo, info.totalPomo);\r\n                    setPomodoroItem(info);\r\n                });\r\n\r\n            setIsPatched(true);\r\n        }\r\n    }, [isPatched]);\r\n\r\n    useEffect(() => { // 임시\r\n        calTodoItemsCount();\r\n        calTodoItemsDoneCount();\r\n        calPomdoroCount();\r\n    }, [todoItems, pomodoroItem]);\r\n\r\n    function calTodoItemsCount() {\r\n        setTodoItemsCount(todoItems.length);\r\n    }\r\n\r\n    function calTodoItemsDoneCount() {\r\n        setTodoItemsDoneCount(todoItems.filter(todoItem => todoItem.isDone).length);\r\n    }\r\n\r\n    function calPomdoroCount() {\r\n        const timerSet = pomodoroItem.timerSet;\r\n\r\n        setPomoCount(pomodoroItem.pomo);\r\n        setPomoTotalCount(pomodoroItem.totalPomo);\r\n        setPomoTimer({\r\n            minutes: Math.floor(timerSet / 60),\r\n            seconds: timerSet % 60\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <div className=\"dashboard_user_info component\">\r\n                <img className=\"user_picture\" src={userInfo.pictureUrl} alt={userInfo.name}></img><br></br>\r\n                <h2 style={{ display: 'inline-block' }}>{userInfo.name}</h2><span>님의 대시보드</span>\r\n                <hr></hr>\r\n            </div>\r\n            <div className=\"dashboard_content component\">\r\n                <div className=\"dashboard_daily_do\">\r\n                    <a href=\"./dailydo\" target=\"_blank\" rel=\"noreferrer\"><div className=\"daily_do_app_picture\">오늘 할 일</div></a>\r\n                    <ul>\r\n                        <li><p>오늘 할 일 달성률</p><hr></hr><h1>{todoItemsCount !== 0 ? Math.round((todoItemsDoneCount / todoItemsCount) * 100) : '0'}%</h1></li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"dashboard_pomodoro\">\r\n                    <a href=\"./pomodoro\" target=\"_blank\" rel=\"noreferrer\"><div className=\"pomodoro_app_picture\">뽀모도로</div></a>\r\n                    <ul>\r\n                        <li><p>나의 집중력</p><hr></hr><h1>{isNaN(pomoTimer.seconds) ? '0분0초' : pomoTimer.minutes + '분' + pomoTimer.seconds + '초'}</h1></li>\r\n                        <li><p>오늘 한 뽀모</p><hr></hr><h1>{pomoCount} 뽀모</h1></li>\r\n                        <li><p>지금까지 한 총 뽀모</p><hr></hr><h1>{pomoTotalCount} 뽀모</h1></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import { Link } from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({ userInfo }) => {\r\n\r\n    function signOut() {\r\n        var auth2 = window.gapi.auth2.getAuthInstance();\r\n        auth2.signOut().then(function () {\r\n            console.log('User signed out.');\r\n            window.location.replace('http://komputer-task.ml');\r\n        });\r\n    }\r\n\r\n    function handleToggle() {\r\n        let dropdown = document.querySelector('.user-info-dropdown');\r\n        dropdown.classList.toggle('show');\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navigation\">\r\n            <ul className=\"navigation-list\">\r\n                <li id=\"logo\">&pi;</li>\r\n                <li><Link to=\"/dashboard\">대시보드</Link></li>\r\n                <li><Link to=\"/preference\">설정</Link></li>\r\n                <li>\r\n                    <div className=\"dropdown\">\r\n                        <div className=\"navigation-user-info\" onClick={handleToggle}>\r\n                            <img className=\"navigation-user_picture\" src={userInfo.pictureUrl} alt={userInfo.name}></img>\r\n                            <span className=\"navigation-user-name\">{userInfo.name}</span>\r\n                        </div>\r\n                        <div className=\"user-info-dropdown\">\r\n                            <p className=\"logout\" onClick={signOut}>로그아웃</p>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import { useEffect } from 'react';\r\nimport Dashboard from './Dashboard';\r\nimport Navigation from '../fixed/Navigation';\r\n\r\nfunction DashboardTemplateWrapper({ darkTheme, userInfo, passUserInfo }) {\r\n\r\n    useEffect(() => { // 랜더링 이후 다크 모드 설정 (추후 리팩토링)\r\n        const navigation = document.querySelector('.navigation');\r\n    \r\n        if(darkTheme) {  \r\n          navigation.classList.add('dark');\r\n        }\r\n        else {\r\n          navigation.classList.remove('dark');\r\n        }\r\n      }, [ darkTheme ]);\r\n\r\n    return (\r\n    <div className=\"navigation-dashboard_wrapper wrapper\">\r\n        <Navigation userInfo={userInfo}></Navigation>\r\n        <Dashboard passUserInfo={passUserInfo}></Dashboard>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  export default DashboardTemplateWrapper;","import './Preference.css';\r\n\r\nconst Preference = ({ darkTheme, onToggle }) => {    \r\n    return (\r\n        <div className=\"preference component\">\r\n            <div className=\"title\">\r\n                <h3>기본 설정</h3>\r\n                <p></p>\r\n            </div>\r\n            <div className=\"content\">\r\n                <ul className=\"general\">\r\n                    <li className=\"theme\">\r\n                        <span className=\"text\">다크 모드</span>\r\n                        <label className=\"switch\">\r\n                            <input type=\"checkbox\" checked={darkTheme} name=\"theme\" onChange={onToggle}></input>\r\n                            <span className=\"slider round\"></span>\r\n                        </label>\r\n                        <p style={{ color : 'gray'}}>밤에는 다크 모드를 켜는 것을 추천드려요.</p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preference;","import { useEffect } from 'react';\r\nimport Preference from './Preference';\r\nimport Navigation from '../fixed/Navigation';\r\n\r\nfunction PreferenceTemplateWrapper({ darkTheme, userInfo, handleThemeToggle }) {\r\n    \r\n    useEffect(() => { // 랜더링 이후 다크 모드 설정 (추후 리팩토링)\r\n        const navigation = document.querySelector('.navigation');\r\n    \r\n        if(darkTheme) {  \r\n          navigation.classList.add('dark');\r\n        }\r\n        else {\r\n          navigation.classList.remove('dark');\r\n        }\r\n      }, [ darkTheme ]);\r\n\r\n    return (\r\n        <div className=\"navigation-preference-wrapper wrapper\">\r\n            <Navigation userInfo={userInfo}></Navigation>\r\n            <h1 style={{ fontSize : '3rem', marginBottom : '10%'}}>설정</h1>\r\n            <div className=\"preferences\">\r\n                <Preference darkTheme={darkTheme} onToggle={handleThemeToggle}></Preference>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PreferenceTemplateWrapper;","import { useEffect, useRef } from 'react';\r\nimport './Login.css';\r\n\r\nfunction Login({ history }) {\r\n    const googleLoginBtn = useRef(null);\r\n  \r\n    //SDK 초기 설정 및 내 API초기화\r\n    useEffect(() => {\r\n        //구글 SDK 불러오기\r\n        (function (d, s, id) {\r\n            let js;\r\n            const fjs = d.getElementsByTagName(s)[0];\r\n            if (d.getElementById(id)) {\r\n                return;\r\n            }\r\n            js = d.createElement(s);\r\n            js.id = id;\r\n            js.src = \"https://apis.google.com/js/platform.js?onload=googleSDKLoaded\";\r\n            fjs.parentNode.insertBefore(js, fjs);\r\n        })(document, \"script\", \"google-jssdk\");\r\n\r\n        // SDK 로드 되면, 초기설정 시작\r\n        window.googleSDKLoaded = () => {\r\n            window.gapi.load(\"auth2\", () => {\r\n                const auth2 = window.gapi.auth2.init({\r\n                    client_id:\r\n                        \"855394650411-buaopph1kokclaq6l9i8tirma6u2svf0.apps.googleusercontent.com\"\r\n                });\r\n                //버튼 클릭시 사용자 정보 불러오기\r\n                auth2.attachClickHandler(\r\n                    googleLoginBtn.current,\r\n                    {},\r\n                    (googleUser) => {\r\n                        onSuccess(googleUser);\r\n                    },\r\n                    (error) => {\r\n                        onFailure(error);\r\n                    }\r\n                );\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    function onSuccess(googleUser) {\r\n        const id_token = googleUser.getAuthResponse().id_token;\r\n        const tokenExpireTime = 60*60; //1시간\r\n\r\n        localStorage.setItem(\"idToken\", id_token);\r\n        document.cookie = `idToken=${id_token}; max-age=${tokenExpireTime} path=/`;\r\n        /* \r\n        const profile = googleUser.getBasicProfile();\r\n        console.log(profile);\r\n        console.log(`Token: ${googleUser.getAuthResponse().id_token}`);\r\n        console.log(`ID: ${profile.getId()}`);\r\n        console.log(`Name: ${profile.getName()}`);\r\n        console.log(`Image URL: ${profile.getImageUrl()}`);\r\n        console.log(`Email: ${profile.getEmail()}`);\r\n        */\r\n       \r\n        // 서버로 토큰 전송\r\n        // 전송 완료 후 대시보드로 Re-route\r\n        fetch('http://ec2-3-36-251-188.ap-northeast-2.compute.amazonaws.com:8080/api/google/tokensignin', {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(id_token)\r\n        })\r\n            .then((response) => response.json())\r\n            .then((userName) => {\r\n                console.log('Signed in as: ' + userName);\r\n                history.push(\"/dashboard\");\r\n            });\r\n    }\r\n\r\n    function onFailure(error) {\r\n        alert(JSON.stringify(error, undefined, 2));\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"login-wrapper component\">\r\n            <div className=\"information\">\r\n                <h1 id=\"logo\">TASK</h1>\r\n                <p>일정/시간 관리 서비스</p>\r\n            </div>\r\n            <div ref={googleLoginBtn} id=\"customBtn\" className=\"customGPlusSignIn\">\r\n                <span className=\"icon\"></span>\r\n                <span className=\"buttonText\">구글 로그인</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login","import './App.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport Footer from './components/fixed/Footer'\r\nimport DashboardTemplateWrapper from './components/dashboard/DashboardTemplateWrapper';\r\nimport PreferenceTemplateWrapper from './components/preference/PreferenceTemplateWrapper';\r\nimport Login from './components/login/Login';\r\n\r\nfunction App() {\r\n  const [ darkTheme, setDarkTheme ] = useState(false); // 다크 모드\r\n\r\n  useEffect(() => { // 랜더링 이후 다크 모드 설정 (추후 리팩토링)\r\n    const body = document.querySelector('body');\r\n    const footer = document.querySelector('.footer');\r\n\r\n    if(darkTheme) {  \r\n      body.classList.add('dark');\r\n      footer.classList.add('dark');\r\n    }\r\n    else {\r\n      body.classList.remove('dark');\r\n      footer.classList.remove('dark');\r\n    }\r\n  }, [ darkTheme ]);\r\n\r\n  function handleThemeToggle() {\r\n    setDarkTheme(!darkTheme);\r\n  }\r\n\r\n  const [userInfo, setUserInfo] = useState(\"\");\r\n\r\n  function handleUserInfo(newUserInfo) {\r\n    setUserInfo(newUserInfo);\r\n  }\r\n\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"main\">\r\n        <Switch>\r\n          <Route path={process.env.PUBLIC_URL + '/'} exact component={Login}/>\r\n          <Route path={process.env.PUBLIC_URL + '/dashboard'} render={() => <DashboardTemplateWrapper darkTheme={darkTheme} userInfo={userInfo} passUserInfo={handleUserInfo}></DashboardTemplateWrapper>}/>\r\n          <Route path={process.env.PUBLIC_URL + '/preference'} render={() => <PreferenceTemplateWrapper darkTheme={darkTheme} userInfo={userInfo} handleThemeToggle={handleThemeToggle}></PreferenceTemplateWrapper>}/>\r\n        </Switch>\r\n        <Footer></Footer>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}